RepoName: 23s2-cp-spa-team-21
File: Team21/Code21/src/unit_testing/src/sp/utils/StubPKBWriter.cpp
Generator: gpt
Intervention: 1
Language: e
Prompt: 
ChatId: 
Code:
// https://platform.openai.com/playground/p/RD0h76mGKpDUhlh5MSEccMd7?model=gpt-4&mode=chat
StubPKBWriter::StubPKBWriter(PKB *pkb) : PKBWriter(pkb) {}

void StubPKBWriter::writeFollows(int stmt1, int stmt2) {
  if (followsRecord.find(stmt1) == followsRecord.end()) {
    followsRecord[stmt1] = std::vector<int>();
  }
  followsRecord[stmt1].push_back(stmt2);
}

bool StubPKBWriter::isFollows(int stmt1, int stmt2) {
  if (followsRecord.find(stmt1) == followsRecord.end()) {
    return false;
  }
  for (int i : followsRecord[stmt1]) {
    if (i == stmt2) {
      return true;
    }
  }
  return false;
}

std::unordered_map<int, std::vector<int>> StubPKBWriter::getAllFollowsRecord() {
  return followsRecord;
}
--------------------
RepoName: 23s2-cp-spa-team-21
File: Team21/Code21/src/unit_testing/src/sp/DesignExtractor/ConcreteExtractor/FollowsExtractorTest.cpp
Generator: gpt
Intervention: 1
Language: e
Prompt: 
ChatId: 
Code:
// https://platform.openai.com/playground/p/RD0h76mGKpDUhlh5MSEccMd7?model=gpt-4&mode=chat

#include "sp/DesignExtractor/ConcreteExtractor/FollowsExtractor.h"

#include "catch.hpp"
#include "pkb/storage/PKB.h"
#include "sp/ASTNode/StatementListNode.h"
#include "unit_testing/src/sp/utils/ASTBuilder.h"
#include "unit_testing/src/sp/utils/StubPKBWriter.h"

#include <memory>

TEST_CASE("FollowsExtractor correctly extracts relationships",
          "[FollowsExtractor]") {
  PKB pkb;
  auto stubPKBWriter = std::make_shared<StubPKBWriter>(&pkb);
  FollowsExtractor extractor((std::shared_ptr<PKBWriter> &)stubPKBWriter);

  SECTION("Single statement list node") {
    auto callNode = ASTBuilder::buildCallNode(1, "a");
    auto stmtListNode = std::make_shared<StatementListNode>(
        std::vector<std::shared_ptr<StatementNode>>{callNode});
    extractor.VisitStatementListNode(stmtListNode);

    // Make assertions for a single statement node. No Follows relation should
    // exist
    REQUIRE(stubPKBWriter->getAllFollowsRecord().empty());
  }

  SECTION("Multiple statements list node") {
    auto callNode = ASTBuilder::buildCallNode(1, "a");
    auto readNode1 = ASTBuilder::buildReadNode(2, "a");
    auto readNode2 = ASTBuilder::buildReadNode(3, "a");
    auto stmtListNode = std::make_shared<StatementListNode>(
        std::vector<std::shared_ptr<StatementNode>>{callNode, readNode1,
                                                    readNode2});

    extractor.VisitStatementListNode(stmtListNode);

    // Make assertions for Follows relation. This should exist.
    REQUIRE(stubPKBWriter->isFollows(1, 2));
    REQUIRE(stubPKBWriter->isFollows(2, 3));
    REQUIRE_FALSE(stubPKBWriter->isFollows(1, 3));
  }
}
--------------------
Directory:../sample/repo/23s2-cp-spa-team-21
Total Snippets: 2
Total lines: 72
SP Snippets: 2
SP lines: 72
PKB Snippets: 0
PKB lines: 0
QPS Snippets: 0
QPS lines: 0
