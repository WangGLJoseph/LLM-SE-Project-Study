RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/QPS/src/tokenizer/Tokenizer.cpp
Generator: gpt3.5
Intervention: 1
Language: e
Prompt: https://chat.openai.com/share/eee4ab57-c5f0-44ca-9fe9-885abf9a14cc
ChatId: eee4ab57-c5f0-44ca-9fe9-885abf9a14cc
Code:
// Used my own paid subscription for gpt4 because I was used to it.
// Reverted to gpt3.5 because it somehow gave me better code.
std::pair<std::string, std::string> Tokenizer::splitStringByRegex(
    const std::string& input, const std::regex& pattern) {
  std::smatch match;
  if (std::regex_search(input, match, pattern)) {
    auto matchPos = static_cast<size_t>(match.position());
    std::string first = input.substr(0, matchPos);
    std::string second =
        input.substr(matchPos + static_cast<size_t>(match.length()));
    return {first, second};
  }
  return {input, ""};
}
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/QPS/src/query/Query.cpp
Generator: gpt
Intervention: 1
Language: e
Prompt: 
ChatId: 
Code:
// https://chat.openai.com/share/8ecd6b88-fd29-40be-a97c-26d08063b7bf
    if (resultMap->find(synonym1) == resultMap->end()) {
      resultMap->emplace(synonym1, std::list<std::string>{});
    }
    if (resultMap->find(synonym2) == resultMap->end()) {
      resultMap->emplace(synonym2, std::list<std::string>{});
    }
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/QPS/src/query/Query.cpp
Generator: gpt
Intervention: 1
Language: e
Prompt: 
ChatId: 
Code:
// https://chat.openai.com/share/8ecd6b88-fd29-40be-a97c-26d08063b7bf
    if (resultMap->find(synonym1) == resultMap->end()) {
      resultMap->emplace(synonym1, std::list<std::string>{});
    }
    if (resultMap->find(synonym2) == resultMap->end()) {
      resultMap->emplace(synonym2, std::list<std::string>{});
    }
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/QPS/src/query/Query.cpp
Generator: gpt
Intervention: 1
Language: e
Prompt: https://chat.openai.com/share/9fb99c09-e82e-41b1-9917-08f511bfbf00
ChatId: 9fb99c09-e82e-41b1-9917-08f511bfbf00
Code:
std::shared_ptr<std::unordered_map<std::string, std::list<std::string>>>
Query::vectorToMap(
    const std::string& synonym1, const std::string& synonym2,
    const std::vector<std::pair<std::string, std::string>>& vectorOfPairs) {
  if (vectorOfPairs.empty()) {
    return createEmptyEntry(synonym1, synonym2);
  }
  std::shared_ptr<std::unordered_map<std::string, std::list<std::string>>>
      resultMap = std::make_shared<
          std::unordered_map<std::string, std::list<std::string>>>();
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/QPS/src/query/Query.cpp
Generator: gpt
Intervention: 1
Language: e
Prompt: 
ChatId: 
Code:
// https://chat.openai.com/share/8ecd6b88-fd29-40be-a97c-26d08063b7bf
  for (const auto& pair : vectorOfPairs) {
    if (resultMap->find(synonym1) == resultMap->end()) {
      resultMap->emplace(synonym1, std::list<std::string>{});
    }
    if (resultMap->find(synonym2) == resultMap->end()) {
      resultMap->emplace(synonym2, std::list<std::string>{});
    }
    resultMap->at(synonym1).emplace_back(pair.first);
    resultMap->at(synonym2).emplace_back(pair.second);
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/PKB/include/ReadFacadeStub.h
Generator: gpt
Intervention: 1
Language: e
Prompt: https://chat.openai.com/share/a56660b9-506a-4919-9450-f4c6e996201e
ChatId: a56660b9-506a-4919-9450-f4c6e996201e
Code:
#pragma once

#include <PKB.h>
#include <ReadFacade.h>

#include <iostream>
#include <string>
#include <vector>

class ReadFacadeStub : public ReadFacade {
 private:
  [[maybe_unused]] PKB* pkb = nullptr;

 public:
  // Entity Manager methods
  std::unordered_set<std::string> getAllVariables() override {
    return {"a", "b", "c"};
  };

  std::unordered_set<std::string> getAllConstants() override {
    return {"0", "7", "8", "9", "20", "1", "2"};
  };

  std::unordered_set<std::string> getAllProcedures() override {
    return {"main", "call"};
  };

  std::unordered_set<int> getStatements() override {
    return {1, 2, 3, 4, 5, 6};
  };

  std::unordered_set<int> getAssigns() override {
    return {1, 2, 5, 6, 7, 9, 10, 13};
  };

  std::unordered_set<int> getReads() override { return {14, 16, 17}; };

  std::unordered_set<int> getPrints() override { return {1, 2, 12, 15}; };

  std::unordered_set<int> getCalls() override { return {7, 8, 9}; };

  std::unordered_set<int> getWhiles() override { return {3, 10, 11}; };

  std::unordered_set<int> getIfs() override { return {4, 8}; };

  // Pattern Manager Methods
  std::vector<std::pair<std::string, std::string>>
  getAssignExpPairsSynonymPartialMatch(
      [[maybe_unused]] const std::vector<std::string>& infixTokens) override {
    return {{"2", "b"}, {"5", "c"}, {"6", "c"}};
  };

  std::vector<std::pair<std::string, std::string>>
  getAssignExpPairsPartialMatch(
      [[maybe_unused]] const std::string& var,
      [[maybe_unused]] const std::vector<std::string>& infixTokens) override {
    return {{"1", "a"}, {"2", "b"}};
  };

  std::vector<std::pair<std::string, std::string>> getAllAssignExpPairs()
      override {
    return {{"1", "a"}, {"2", "b"}, {"5", "c"}, {"6", "c"}};
  };

  // Relationship Manager Methods
  // parent
  std::vector<int> getChildren([[maybe_unused]] int parentStmtNo) override {
    return {4, 5, 6, 7};
  };

  int getParent([[maybe_unused]] int childStmtNo) override { return 2; };

  std::vector<int> getChildrenStar([[maybe_unused]] int parentStmtNo) override {
    return {4, 5, 6, 7};
  };

  std::vector<int> getParentStar([[maybe_unused]] int childStmtNo) override {
    return {1, 2, 3};
  };

  std::vector<std::pair<int, int>> getAllParentPairs() override {
    return {{1, 2}, {3, 4}, {5, 6}};
  };

  std::vector<std::pair<int, int>> getAllParentStarPairs() override {
    return {{1, 2}, {1, 3}, {2, 3}};
  }

  std::unordered_set<int> getAllChildren() override { return {2, 3, 4, 5, 6}; };

  std::unordered_set<int> getAllParents() override { return {1, 2, 3}; };

  // follows
  int getStmtThatFollowsAfter([[maybe_unused]] int stmtNo) override {
    return 4;
  };

  int getStmtThatFollowsBefore([[maybe_unused]] int stmtNo) override {
    return 3;
  };

  std::vector<int> getAllStmtsThatFollowAfter(
      [[maybe_unused]] int stmtNo) override {
    return {10, 11, 12, 13};
  };

  std::vector<int> getAllStmtsThatFollowBefore(
      [[maybe_unused]] int stmtNo) override {
    return {4, 5, 6};
  };

  std::vector<std::pair<int, int>> getAllFollowPairs() override {
    return {{1, 2}, {3, 4}, {5, 6}};
  };

  std::vector<std::pair<int, int>> getAllFollowStarPairs() override {
    return {{1, 2}, {1, 3}, {2, 3}};
  }

  std::unordered_set<int> getAllStmtsThatFollowAfterOtherStmts() override {
    return {4, 5, 6, 7};
  }

  std::unordered_set<int> getAllStmtsThatFollowBeforeOtherStmts() override {
    return {1, 2, 3};
  }

  // modifies
  std::vector<std::string> getVarsModifiedByStmt(
      [[maybe_unused]] int stmtNo) override {
    return {"a", "b"};
  };

  std::vector<int> getStmtsThatModifyVar(
      [[maybe_unused]] std::string str) override {
    return {1, 2, 3, 9};
  };

  std::vector<std::pair<int, std::string>> getAllVarModifiedByStmtPairs()
      override {
    return {{1, "a"}, {2, "b"}, {3, "c"}};
  };

  std::vector<std::string> getVarsModifiedByProcedure(
      [[maybe_unused]] std::string& str) override {
    return {"a", "b", "c", "d"};
  };

  std::vector<std::string> getProceduresThatModifyVar(
      [[maybe_unused]] std::string& str) override {
    return {"main", "call"};
  };

  std::vector<std::pair<std::string, std::string>>
  getAllVarModifiedByProcedurePairs() override {
    return {{"main", "a"}, {"main", "c"}, {"call", "d"}};
  };

  std::unordered_set<int> getAllStmtsThatModifyVars() override {
    return {1, 2, 3};
  }

  std::unordered_set<std::string> getAllVarsModifiedByStmts() override {
    return {"a", "b"};
  }

  std::unordered_set<std::string> getAllProceduresThatModifyVars() override {
    return {"main", "call", "fun"};
  }

  std::unordered_set<std::string> getAllVarsModifiedByProcedures() override {
    return {"a", "b", "c"};
  }

  // uses
  std::vector<std::string> getVarsUsedByStmt(
      [[maybe_unused]] int stmtNo) override {
    return {"a", "b"};
  };

  std::vector<int> getStmtsThatUseVar(
      [[maybe_unused]] std::string str) override {
    return {1, 2, 3};
  };

  std::vector<std::pair<int, std::string>> getAllVarUsedByStmtPairs() override {
    return {{1, "a"}, {2, "a"}, {3, "b"}};
  };

  std::vector<std::string> getVarsUsedByProcedure(
      [[maybe_unused]] std::string str) override {
    return {"a", "b"};
  };

  std::vector<std::string> getProceduresThatUseVar(
      [[maybe_unused]] std::string str) override {
    return {"main", "call"};
  };

  std::vector<std::pair<std::string, std::string>>
  getAllVarUsedByProcedurePairs() override {
    return {{"main", "d"}, {"call", "a"}, {"main", "ef"}};
  };

  std::unordered_set<int> getAllStmtsThatUseVars() override {
    return {1, 2, 3};
  }
  std::unordered_set<std::string> getAllVarsUsedByStmts() override {
    return {"a", "b", "c"};
  }
  std::unordered_set<std::string> getAllProceduresThatUseVars() override {
    return {"main", "call"};
  }
  std::unordered_set<std::string> getAllVarsUsedByProcedures() override {
    return {"a", "b", "c", "d"};
  }
};
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/PKB/include/PKB.h
Generator: gpt
Intervention: 1
Language: e
Prompt: https://chat.openai.com/share/5765cbd9-43bc-41c3-ae9f-7bebba3c41a3
ChatId: 5765cbd9-43bc-41c3-ae9f-7bebba3c41a3
Code:
private:
  PKB();
  PKB(const PKB&) = delete;
  PKB& operator=(const PKB&) = delete;
  EntityManager entityManager;
  PatternManager patternManager;
  RelationshipManager relationshipManager;

 public:
  static PKB& getPKB();
  void clear();
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/PKB/include/pattern_manager/AssignExpPatternStore.h
Generator: gpt
Intervention: 0
Language: e
Prompt: https://chat.openai.com/share/feedba04-6fd0-4e9b-8b5a-c7826127fa4f
ChatId: feedba04-6fd0-4e9b-8b5a-c7826127fa4f
Code:
struct pairHash {
  std::size_t operator()(const std::pair<std::string, std::string>& p) const {
    std::size_t hash1 = std::hash<std::string>{}(p.first);
    std::size_t hash2 = std::hash<std::string>{}(p.second);
    return hash1 ^ (hash2 + 0x9e3779b9 + (hash1 << 6) + (hash1 >> 2));
  }
};
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/PKB/src/entity_manager/EntitySetStore.cpp
Generator: gpt
Intervention: 1
Language: e
Prompt: https://chat.openai.com/share/79929c11-45e4-4e55-9996-cc966fd74a80
ChatId: 79929c11-45e4-4e55-9996-cc966fd74a80
Code:
template <typename T>
void EntitySetStore<T>::insert(const T& element) {
  set.insert(element);
}

template <typename T>
std::unordered_set<T> EntitySetStore<T>::getAll() {
  return set;
}

template <typename T>
void EntitySetStore<T>::clear() {
  set.clear();
}

template class EntitySetStore<int>;
template class EntitySetStore<std::string>;
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/PKB/src/pattern_manager/AssignExpPatternStore.cpp
Generator: gpt
Intervention: 0
Language: e
Prompt: https://chat.openai.com/share/aa82bf6b-8a80-4cc8-97d0-371119c5ef4d
ChatId: aa82bf6b-8a80-4cc8-97d0-371119c5ef4d
Code:
bool AssignExpPatternStore::isAlphanumeric(const std::string& str) {
  return std::all_of(str.begin(), str.end(),
                     [](unsigned char c) { return std::isalnum(c); });
}
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/PKB/src/PKB.cpp
Generator: gpt
Intervention: 1
Language: e
Prompt: https://chat.openai.com/share/5765cbd9-43bc-41c3-ae9f-7bebba3c41a3
ChatId: 5765cbd9-43bc-41c3-ae9f-7bebba3c41a3
Code:
PKB::PKB() {}

PKB& PKB::getPKB() {
  static PKB pkb;
  return pkb;
}
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/PKB/src/relationship_manager/ParentStore.cpp
Generator: gpt
Intervention: 0
Language: e
Prompt: chat.openai.com/share/cc8d4070-1169-4b5e-9555-14df283c12fa
ChatId: 
Code:
// Check if parentStmtNo exists in the map
  if (parentToChildMap.find(parentStmtNo) == parentToChildMap.end()) {
    // If not found, insert an empty vector for parentStmtNo
    parentToChildMap[parentStmtNo] = std::vector<int>();
  }

  auto& childVector = parentToChildMap[parentStmtNo];
  if (std::find(childVector.begin(), childVector.end(), childStmtNo) ==
      childVector.end()) {
    childVector.push_back(childStmtNo);
  }
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/PKB/src/relationship_manager/ParentStore.cpp
Generator: gpt
Intervention: 0
Language: e
Prompt: https://chat.openai.com/share/30d4cf60-6c09-436d-904a-b20262b98981
ChatId: 30d4cf60-6c09-436d-904a-b20262b98981
Code:
std::vector<std::pair<int, int>> resultVector;

  for (const auto& entry : parentToChildMap) {
    int parent = entry.first;
    const std::vector<int>& childVector = entry.second;

    for (int child : childVector) {
      resultVector.push_back(std::make_pair(parent, child));
    }
  }
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/PKB/src/relationship_manager/RelationshipMapManager.cpp
Generator: gpt
Intervention: 0
Language: e
Prompt: 
ChatId: 
Code:
// https://chat.openai.com/share/8d305eee-b1fb-4270-8365-60264fc31c1b
    auto& leftToRightMapSecond = arrayAtIndexLeftToRight->second;
    if (std::find(leftToRightMapSecond.begin(), leftToRightMapSecond.end(),
                  value) == leftToRightMapSecond.end()) {
      leftToRightMapSecond.push_back(value);
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/PKB/src/relationship_manager/RelationshipMapManager.cpp
Generator: gpt
Intervention: 0
Language: e
Prompt: 
ChatId: 
Code:
// https://chat.openai.com/share/8d305eee-b1fb-4270-8365-60264fc31c1b
    auto& rightToLeftMapSecond = arrayAtIndexRightToLeft->second;
    if (std::find(rightToLeftMapSecond.begin(), rightToLeftMapSecond.end(),
                  key) == rightToLeftMapSecond.end()) {
      rightToLeftMapSecond.push_back(key);
--------------------
RepoName: 23s2-cp-spa-team-10
File: Team10/Code10/src/spa/PKB/src/relationship_manager/RelationshipMapManager.cpp
Generator: gpt
Intervention: 1
Language: e
Prompt: https://chat.openai.com/share/70c84b62-2943-4870-898b-3659df332b23
ChatId: 70c84b62-2943-4870-898b-3659df332b23
Code:
template <typename K, typename V>
std::vector<std::pair<K, V>> RelationshipMapManager<K, V>::getAllPairs() {
  pairs.clear();
  // Iterate over the key-value pairs in the map
  for (const auto& kvp : leftToRightMap) {
    const auto key = kvp.first;
    const auto arr = kvp.second;
    for (const auto& val : arr) {
      pairs.push_back({key, val});
    }
  }
  return pairs;
}
--------------------
Directory:../sample/repo/23s2-cp-spa-team-10
Total Snippets: 16
Total lines: 354
SP Snippets: 0
SP lines: 0
PKB Snippets: 11
PKB lines: 306
QPS Snippets: 5
QPS lines: 48
