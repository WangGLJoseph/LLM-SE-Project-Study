#ifndef USESPREDICATE_H
#define USESPREDICATE_H

#include "Predicate.h"
#include <memory>
#include <variant>
#include "PredicateUtils.h"


class Strategy;

using UsesLhsRef = std::variant<int, Synonym, std::string>; // Combination of procedure and statements ref

class UsesPredicate : public Predicate {
private:
    UsesLhsRef lhs; // Directly holds int, Synonym, or std::string
    EntityRef rhs; // Can be a synonym of type variable, a variable name, or "_"
    bool isValidRow(const std::vector<std::shared_ptr<Entity>>& row) const;
  public:
    UsesPredicate(UsesLhsRef lhs, EntityRef rhs);
    ~UsesPredicate() override = default;
    [[nodiscard]] shared_ptr<BaseTable> getTable(QueryManager& qm) override;
};

#endif // USESPREDICATE_H
