#ifndef MODIFIESPREDICATE_H
#define MODIFIESPREDICATE_H

#include "Predicate.h"
#include <memory>
#include <variant>
#include "PredicateUtils.h"


class Strategy;

using ModifiesLhsRef = std::variant<int, Synonym, std::string>; // Combination of procedure and statements ref

class ModifiesPredicate : public Predicate {
private:
    ModifiesLhsRef lhs; // Directly holds int, Synonym, or std::string
    EntityRef rhs; // Can be a synonym of type variable, a variable name, or "_"
    bool isValidRow(const std::vector<std::shared_ptr<Entity>>& row) const;
  public:
    ModifiesPredicate(ModifiesLhsRef lhs, EntityRef rhs);
    ~ModifiesPredicate() override = default;
    [[nodiscard]] shared_ptr<BaseTable> getTable(QueryManager& qm) override;

    static bool isValidLhs(const ModifiesLhsRef& lhs);
    static bool isValidRhs(const EntityRef& rhs);
};

#endif // MODIFIESPREDICATE_H
