#include <unordered_map>
#include <unordered_set>

template<typename Type1, typename Type2>
class RelationshipTable {
private:
    std::unordered_map<Type1, std::unordered_set<Type2>> relationships;

public:
    /**
     * Add a relationship between the first and second parameter.
     * @param first - The first parameter
     * @param second - The second parameter
     */
    void addRelationship(const Type1& first, const Type2& second) {
        // If 'first' is not already a key in relationships, it initializes
        // a new unordered_set automatically and inserts 'second'.
        relationships[first].insert(second);
    }

    /**
     * Check if the second parameter is related to the first parameter.
     * @param first - The first parameter
     * @param second - The second parameter
     * @return true if the second parameter is related to the first parameter
     */
    bool hasRelationship(const Type1& first, const Type2& second) const {
        auto iter = relationships.find(first);
        if (iter == relationships.end()) {
            // 'first' not found as a key in relationships
            return false;
        }
        // Check if 'second' is in the unordered_set associated with 'first'
        return iter->second.find(second) != iter->second.end();
    }
